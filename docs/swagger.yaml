definitions:
  dto.CreateFacetEnrichedConfig:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.CreateFacetEnrichedConfigItem'
        type: array
    type: object
  dto.CreateFacetEnrichedConfigItem:
    properties:
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      status:
        $ref: '#/definitions/enum.FacetStatus'
      value:
        type: string
    type: object
  dto.CreateFacetInput:
    properties:
      color:
        type: string
      configuration:
        $ref: '#/definitions/json.FacetConfig'
      privateLabel:
        type: string
      publicLabel:
        type: string
    required:
    - color
    - configuration
    - privateLabel
    - publicLabel
    type: object
  dto.CreateFacetResponse:
    properties:
      color:
        type: string
      configuration:
        $ref: '#/definitions/dto.CreateFacetEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.CreatePrismEnrichedConfig:
    properties:
      base:
        $ref: '#/definitions/dto.CreatePrismFacet'
      users:
        items:
          $ref: '#/definitions/dto.CreatePrismEnrichedUserItem'
        type: array
    type: object
  dto.CreatePrismEnrichedUserItem:
    properties:
      facet:
        $ref: '#/definitions/dto.CreatePrismFacet'
      userId:
        type: string
    type: object
  dto.CreatePrismFacet:
    properties:
      color:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.CreatePrismInput:
    properties:
      configuration:
        $ref: '#/definitions/json.PrismConfig'
      name:
        type: string
    required:
    - configuration
    - name
    type: object
  dto.CreatePrismResponse:
    properties:
      configuration:
        $ref: '#/definitions/dto.CreatePrismEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CreateUserCommunicationServiceInput:
    properties:
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      value:
        type: string
    required:
    - name
    - service
    - value
    type: object
  dto.CreateUserCommunicationServiceResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      value:
        type: string
    type: object
  dto.GetFacetEnrichedConfig:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.GetFacetEnrichedConfigItem'
        type: array
    type: object
  dto.GetFacetEnrichedConfigItem:
    properties:
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      status:
        $ref: '#/definitions/enum.FacetStatus'
      value:
        type: string
    type: object
  dto.GetFacetResponseItem:
    properties:
      color:
        type: string
      configuration:
        $ref: '#/definitions/dto.GetFacetEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.GetPrismEnrichedConfig:
    properties:
      base:
        $ref: '#/definitions/dto.GetPrismFacet'
      users:
        items:
          $ref: '#/definitions/dto.GetPrismEnrichedUserItem'
        type: array
    type: object
  dto.GetPrismEnrichedUserItem:
    properties:
      facet:
        $ref: '#/definitions/dto.GetPrismFacet'
      userId:
        type: string
    type: object
  dto.GetPrismFacet:
    properties:
      color:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.GetPrismResponseItem:
    properties:
      configuration:
        $ref: '#/definitions/dto.GetPrismEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.GetUserByEmailResponse:
    properties:
      avatarUrl:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
    type: object
  dto.GetUserCommunicationServicesResponseItem:
    properties:
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      value:
        type: string
    type: object
  dto.GetUserMeResponse:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
    type: object
  dto.UpdateFacetEnrichedConfig:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.UpdateFacetEnrichedConfigItem'
        type: array
    type: object
  dto.UpdateFacetEnrichedConfigItem:
    properties:
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      status:
        $ref: '#/definitions/enum.FacetStatus'
      value:
        type: string
    type: object
  dto.UpdateFacetInput:
    properties:
      color:
        type: string
      configuration:
        $ref: '#/definitions/json.FacetConfig'
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.UpdateFacetResponse:
    properties:
      color:
        type: string
      configuration:
        $ref: '#/definitions/dto.UpdateFacetEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.UpdatePrismEnrichedConfig:
    properties:
      base:
        $ref: '#/definitions/dto.UpdatePrismFacet'
      users:
        items:
          $ref: '#/definitions/dto.UpdatePrismEnrichedUserItem'
        type: array
    type: object
  dto.UpdatePrismEnrichedUserItem:
    properties:
      facet:
        $ref: '#/definitions/dto.UpdatePrismFacet'
      userId:
        type: string
    type: object
  dto.UpdatePrismFacet:
    properties:
      color:
        type: string
      id:
        type: integer
      privateLabel:
        type: string
      publicLabel:
        type: string
    type: object
  dto.UpdatePrismInput:
    properties:
      configuration:
        $ref: '#/definitions/json.PrismConfig'
      name:
        type: string
    type: object
  dto.UpdatePrismResponse:
    properties:
      configuration:
        $ref: '#/definitions/dto.UpdatePrismEnrichedConfig'
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UpdateUserCommunicationServiceInput:
    properties:
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      value:
        type: string
    type: object
  dto.UpdateUserCommunicationServiceResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      service:
        $ref: '#/definitions/enum.CommunicationService'
      value:
        type: string
    type: object
  enum.CommunicationService:
    enum:
    - faceToFace
    - phone
    - message
    - email
    - discord
    - microsoftTeams
    type: string
    x-enum-varnames:
    - FaceToFace
    - Phone
    - Message
    - Email
    - Discord
    - MicrosoftTeams
  enum.FacetStatus:
    enum:
    - available
    - emergencyOnly
    type: string
    x-enum-varnames:
    - Available
    - EmergencyOnly
  error.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  json.FacetConfig:
    properties:
      items:
        items:
          $ref: '#/definitions/json.FacetConfigItem'
        type: array
    type: object
  json.FacetConfigItem:
    properties:
      id:
        type: integer
      status:
        $ref: '#/definitions/enum.FacetStatus'
    type: object
  json.PrismConfig:
    properties:
      base:
        type: integer
      users:
        items:
          $ref: '#/definitions/json.PrismConfigUserItem'
        type: array
    type: object
  json.PrismConfigUserItem:
    properties:
      facetId:
        type: integer
      userId:
        type: string
    type: object
  model.User:
    properties:
      avatarURL:
        description: nullable
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
    type: object
  types.RefractedFacet:
    properties:
      color:
        type: string
      id:
        type: integer
      label:
        type: string
      lastUpdatedAt:
        type: string
    type: object
  types.RefractedUserFacet:
    properties:
      refractedFacet:
        $ref: '#/definitions/types.RefractedFacet'
      user:
        $ref: '#/definitions/model.User'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the backend API for the HS project
  title: HS Backend API
  version: "1.0"
paths:
  /api/facets:
    get:
      consumes:
      - application/json
      description: Returns facets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetFacetResponseItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get facets
      tags:
      - Facets
    post:
      consumes:
      - application/json
      description: Creates a new facet
      parameters:
      - description: Facet
        in: body
        name: facet
        required: true
        schema:
          $ref: '#/definitions/dto.CreateFacetInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateFacetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create facet
      tags:
      - Facets
  /api/facets/{facetId}:
    delete:
      consumes:
      - application/json
      description: Deletes a facet
      parameters:
      - description: Facet ID
        in: path
        name: facetId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete facet
      tags:
      - Facets
    patch:
      consumes:
      - application/json
      description: Updates a facet
      parameters:
      - description: Facet ID
        in: path
        name: facetId
        required: true
        type: integer
      - description: Facet
        in: body
        name: facet
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFacetInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateFacetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update facet
      tags:
      - Facets
  /api/prisms:
    get:
      consumes:
      - application/json
      description: Returns prisms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetPrismResponseItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get prisms
      tags:
      - Prisms
    post:
      consumes:
      - application/json
      description: Creates a new prism
      parameters:
      - description: Prism
        in: body
        name: prism
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePrismInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreatePrismResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create prism
      tags:
      - Prisms
  /api/prisms/{prismId}:
    delete:
      consumes:
      - application/json
      description: Deletes a prism
      parameters:
      - description: Prism ID
        in: path
        name: prismId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete prism
      tags:
      - Prisms
    patch:
      consumes:
      - application/json
      description: Updates a prism
      parameters:
      - description: Prism ID
        in: path
        name: prismId
        required: true
        type: integer
      - description: Prism
        in: body
        name: prism
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePrismInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdatePrismResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update prism
      tags:
      - Prisms
  /api/prisms/{prismId}/activate:
    post:
      consumes:
      - application/json
      description: Activates a prism
      parameters:
      - description: Prism ID
        in: path
        name: prismId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Activate prism
      tags:
      - Prisms
  /api/refracted-facets:
    get:
      consumes:
      - application/json
      description: Returns refracted facets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.RefractedUserFacet'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get refracted facets
      tags:
      - Refracted Facets
  /api/users:
    get:
      consumes:
      - application/json
      description: Returns user info by email query param
      parameters:
      - description: Email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserByEmailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - Users
  /api/users/communication-services:
    get:
      consumes:
      - application/json
      description: Returns user communication services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GetUserCommunicationServicesResponseItem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user communication services
      tags:
      - User Communication Services
    post:
      consumes:
      - application/json
      description: Creates a new user communication service
      parameters:
      - description: User Communication Service
        in: body
        name: userCommunicationService
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserCommunicationServiceInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateUserCommunicationServiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user communication service
      tags:
      - User Communication Services
  /api/users/communication-services/{userCommunicationServiceId}:
    delete:
      consumes:
      - application/json
      description: Deletes a user communication service
      parameters:
      - description: User Communication Service ID
        in: path
        name: userCommunicationServiceId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user communication service
      tags:
      - User Communication Services
    patch:
      consumes:
      - application/json
      description: Updates a user communication service
      parameters:
      - description: User Communication Service ID
        in: path
        name: userCommunicationServiceId
        required: true
        type: integer
      - description: User Communication Service
        in: body
        name: userCommunicationService
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserCommunicationServiceInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserCommunicationServiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user communication service
      tags:
      - User Communication Services
  /api/users/me:
    get:
      consumes:
      - application/json
      description: Returns user me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserMeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/error.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user me
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
